---
alwaysApply: true
---

# AI 컨텍스트 관리 지침

## 🎯 핵심 원칙

- 작업 전 반드시 `ai-context.md` 파일을 읽고 프로젝트 상황 파악
- 기존 코드 패턴과 스타일을 일관성 있게 유지
- 작업 완료 후 변경사항을 `ai-context.md`에 반영

## 📋 작업 시작 프로세스

### 1. 컨텍스트 확인

```
"ai-context.md 파일을 읽고 현재 프로젝트 상황을 파악해주세요"
```

### 2. 빈 파일인 경우 초기 생성

```
"ai-context.md가 비어있습니다. 프로젝트를 분석해서 초기 컨텍스트를 생성해주세요"
```

#### 컨텍스트 초기 생성

```
"프로젝트 구조를 분석하고 ai-context.md 파일을 생성해주세요.
다음을 포함해주세요:
- 기술 스택 및 아키텍처
- 주요 파일 역할
- 현재 구현 상태
- 코딩 컨벤션"
```

## 🔄 작업 완료 후 업데이트

### 중요한 변경사항 발생 시

```
"[구체적 작업 내용]을 완료했습니다. ai-context.md를 업데이트해주세요"
```

### 업데이트가 필요한 경우

- ✅ 새로운 기능 구현 완료
- ✅ 중요한 아키텍처 변경
- ✅ 새로운 라이브러리/패턴 도입
- ✅ API 엔드포인트 추가/변경

### 업데이트 불필요한 경우

- ❌ 단순 버그 수정
- ❌ 코드 리팩토링만
- ❌ 스타일 변경
- ❌ 임시 테스트 코드

## 🏗️ AI 컨텍스트 구조

### 기본 정보

- 프로젝트 개요 및 목적
- 사용 중인 기술 스택
- 주요 디렉토리 구조
- 핵심 파일들의 역할

### 구현 상태

- 완료된 기능 목록
- 현재 진행 중인 작업
- 다음 예정 작업
- 알려진 이슈 및 주의사항

### 개발 규칙

- 코딩 컨벤션 및 스타일
- 아키텍처 패턴
- 네이밍 규칙
- 에러 처리 방식

## 💡 효율적인 프롬프트 패턴

### 컨텍스트 초기 생성

```
"프로젝트 구조를 분석하고 ai-context.md 파일을 생성해주세요.
다음을 포함해주세요:
- 기술 스택 및 아키텍처
- 주요 파일 역할
- 현재 구현 상태
- 코딩 컨벤션"
```

### 작업 후 업데이트

```
"[로그인 API 구현/데이터베이스 설정/UI 컴포넌트 추가] 작업을 완료했습니다.
ai-context.md에 반영해주세요."
```

### 컨텍스트 확인

```
"ai-context.md를 기반으로 현재 프로젝트 상황을 간단히 요약해주세요."
```
